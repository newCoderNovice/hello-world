class Solution
{

    public int[][] shortestDistance(int[][] mat)
    {
        //working
        Queue<int[]> q=new LinkedList<int[]>();
        
        for(int i=0; i<mat.length; i++)
        {
            for(int j=0; j<mat[0].length; j++)
            {
                if(mat[i][j]==0)
                    q.add(new int[]{i,j});
                else
                    mat[i][j]=-1;
            }
        }
        
        int distance=0;
        int[][] dirs=new int[][]{{1,0}, {0,-1}, {-1,0}, {0,1}};
        
        while(!q.isEmpty())
        {
            int size=q.size();
            distance++;
            
            while(size-- >0)
            {
                int[] point=q.poll();
                
                for(int[] dir:dirs)
                {
                    int r=point[0]+dir[0];
                    int c=point[1]+dir[1];
                    
                    if(r<0 || r>=mat.length || c<0 || c>= mat[0].length || mat[r][c]!=-1)
                        continue;
                        
                    mat[r][c]=distance;
                    q.add(new int[]{r,c});
                }
            }
        }
        return mat;
    }
    
    
    public int[][] shortestDistanceItterative(int[][] mat)
    {
        //time complexity = O(r.c)^2
        
        if(mat==null)
            return mat;
            
        int rows=mat.length, cols=mat[0].length;
        int[][] distance = new int[rows][cols];
        
        for(int i=0; i<rows; i++)
        {
            for(int j=0; j<cols; j++)
            {
                if(mat[i][j]==0)
                    distance[i][j]=0;
                    
                 else
                 {
                      for(int k=0; k<rows; k++)
                      {
                          for(int l=0; l<cols; l++)
                          {
                              int dist=Math.abs(k-i)+Math.abs(l-j);
                              distance[i][j]=Math.min(distance[i][j], Math.abs(k-i)+Math.abs(l-j));
                          }
                      }
                 }
            }
        }
        
        return distance;
    }
    
    
    public int[][] shortestDistanceDP(int[][] mat)
    {
        int rows= mat.length, cols=mat[0].length;
        int[][] distance = new int[rows][cols];
        
        //top-left
        for(int i=0; i<rows; i++)
        {
            for(int j=0; j<cols; j++)
            {
                distance[i][j]=Integer.MAX_VALUE;
                if(mat[i][j]==0)
                    distance[i][j]=0;
                    
                 else
                 {
                      if(i>0)
                        distance[i][j]=Math.min(distance[i][j], 1+distance[i-1][j]);
                       
                      if(j>0)
                        distance[i][j]=Math.min(distance[i][j], 1+distance[i][j-1]);
                 }
            }
        }
        
        //bottom-right
        for(int i=rows-1; i>=0; i--)
        {
            for(int j=cols-1; j>=0; j--)
            {
                if(i<rows-1)
                  distance[i][j]=Math.min(distance[i][j], 1+distance[i+1][j]);

                if(j<cols-1)
                  distance[i][j]=Math.min(distance[i][j], 1+distance[i][j+1]);
            }
            
       }
        return distance;
    }

}
