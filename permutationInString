class Solution
{
    public boolean permutationExists(String s1, String s2)
    {
      // O(l1+26(l2-l1)) time and O(1) space
      
        if(s1.length()>s2.length())
          return false;
          
        int[] s1Map=new int[26];
        int[] s2Map=new int[26];
        
        for(int i=0; i<s1.length(); i++)
        {
            s1Map[s1.charAt(i)-'a']++;
            s2Map[s2.charAt(i)-'a']++;
        }
        
        for(int i=0; i<s2.length()-s1.length(); i++)
        {
            if(matches(s1Map, s2Map))
                return true;
            //sliding window
            s2Map[s2.charAt(i+s1.length()-'a')++;
            s2Map[s2.charAt(i)-'a']--;
        }
        return matches(s1Map, s2Map);
    }
    
    private boolean matches(int[] a, int[] b)
    {
        for(int i=0; i<26; i++)
        {
            if(a[i]!=b[i])
                return false;
        }
        return true;
    }

}
